{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","components/ErrorPage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["Navbar","isPageActive","isActive","classNames","className","role","to","App","HomePage","ErrorPage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","CENTURIES","SEX","All","Male","Female","PeopleFilters","setSearchParams","getCurrentCenturies","useCallback","century","centuriesFromSearch","getAll","includes","filter","param","handleQueryChange","text","length","map","get","sex","type","placeholder","onChange","event","target","centuries","query","Loader","PersonLink","person","name","slug","PeopleTable","people","peopleSlug","useParams","born","died","motherName","mother","fatherName","father","undefined","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","preparePeople","find","isSexValid","isCenturyValid","Math","ceil","isNameValid","toLowerCase","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","preparedPeople","useMemo","filterParams","isDataEmpty","isDataPrepared","useEffect","getPeople","catch","finally","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.36ffb071.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nexport const Navbar = () => {\n  const isPageActive = ({ isActive }: { isActive: boolean }) => {\n    return classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    });\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={isPageActive}\n            aria-current=\"page\"\n          >\n            Home\n          </NavLink>\n          <NavLink to=\"/people\" className={isPageActive}>People</NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\n\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const ErrorPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import React from 'react';\nimport { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nconst CENTURIES = [16, 17, 18, 19, 20];\nconst SEX = {\n  All: null,\n  Male: 'm',\n  Female: 'f',\n};\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const getCurrentCenturies = useCallback((century: string) => {\n    const centuriesFromSearch = searchParams.getAll('centuries');\n\n    if (centuriesFromSearch === null) {\n      return [century];\n    }\n\n    if (centuriesFromSearch.includes(century)) {\n      return centuriesFromSearch.filter(param => param !== century);\n    }\n\n    return [...centuriesFromSearch, century];\n  }, [searchParams]);\n\n  const handleQueryChange = useCallback((text: string) => {\n    if (text.length === 0) {\n      searchParams.delete('query');\n      setSearchParams(searchParams);\n\n      return;\n    }\n\n    searchParams.set('query', text);\n    setSearchParams(searchParams);\n  }, [searchParams, setSearchParams]);\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(SEX).map(([key, value]) => (\n          <SearchLink\n            key={key}\n            className={classNames({\n              'is-active': searchParams.get('sex') === value,\n            })}\n            params={{ sex: value }}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={(event) => handleQueryChange(event.target.value)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': searchParams\n                    .getAll('centuries')\n                    .includes(century.toString()),\n                })}\n                params={{ centuries: getCurrentCenturies(century.toString()) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': searchParams\n                  .getAll('centuries')\n                  .length !== 0,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{\n            centuries: null,\n            sex: null,\n            query: null,\n          }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Person } from '../types';\n\ninterface Props {\n  person: Person,\n}\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, sex, slug } = person;\n\n  return (\n    <Link\n      to={`/people/${slug}`}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\nexport const PeopleTable = ({ people }: { people: Person[] }) => {\n  const { peopleSlug } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          people.map((person) => {\n            const {\n              sex,\n              born,\n              died,\n              motherName,\n              mother,\n              fatherName,\n              father,\n              slug,\n            } = person;\n\n            return (\n              <tr\n                key={slug}\n                data-cy=\"person\"\n                className={classNames({\n                  'has-background-warning': slug === peopleSlug,\n                })}\n              >\n                <td>\n                  <PersonLink person={person} />\n                </td>\n\n                <td>{sex}</td>\n                <td>{born}</td>\n                <td>{died}</td>\n                <td>\n                  {mother !== undefined\n                    ? (<PersonLink person={mother} />)\n                    : motherName}\n                </td>\n                <td>\n                  {father !== undefined\n                    ? (<PersonLink person={father} />)\n                    : fatherName}\n                </td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\ninterface FilterParams {\n  sex: string | null,\n  centuries: string[] | null,\n  query: string | null,\n}\n\ntype Prepare = (\n  people: Person[],\n  filterParams: FilterParams,\n) => Person[];\n\nconst preparePeople: Prepare = (people, { sex, centuries, query }) => {\n  return people\n    .map((person) => {\n      return {\n        ...person,\n        motherName: person.motherName || '-',\n        fatherName: person.fatherName || '-',\n        mother: people.find(mother => mother.name === person.motherName),\n        father: people.find(father => father.name === person.fatherName),\n      };\n    })\n    .filter(person => {\n      const isSexValid = sex === null\n        ? true\n        : person.sex === sex;\n      const isCenturyValid = centuries === null || centuries?.length === 0\n        ? true\n        : centuries.includes(Math.ceil(person.born / 100).toString());\n      const isNameValid = query === null\n        ? true\n        : person.name.toLowerCase().includes(query.toLowerCase());\n\n      return isSexValid && isCenturyValid && isNameValid;\n    });\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  const preparedPeople = useMemo(() => {\n    const filterParams: FilterParams = {\n      sex: searchParams.get('sex'),\n      centuries: searchParams.getAll('centuries'),\n      query: searchParams.get('query'),\n    };\n\n    return preparePeople(people, filterParams);\n  }, [searchParams, people]);\n\n  const isDataEmpty = useMemo(() => {\n    return !isError && !isLoading && people.length === 0;\n  }, [isLoading, isError, people]);\n\n  const isDataPrepared = useMemo(() => {\n    return !isError && !isLoading && people.length > 0;\n  }, [isLoading, isError, people]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsError(false);\n\n    getPeople()\n      .then((response) => {\n        setPeople(preparePeople(\n          response,\n          { sex: null, centuries: null, query: null },\n        ));\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (<Loader />)}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isDataEmpty && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isDataPrepared && <PeopleTable people={preparedPeople} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  HashRouter as Router, Routes, Route, Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { ErrorPage } from './components/ErrorPage';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"*\" element={<ErrorPage />} />\n\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":peopleSlug\" element={<PeoplePage />} />\n          </Route>\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}